<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>十七日食记</title>
    <link>https://github.com/shiqiRose/shiqiRose.github.io/</link>
    <atom:link href="/shiqiRose.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>这似乎有点奇怪,并不知道说什么,大概就是填坑日记吧~</description>
    <pubDate>Sun, 22 Apr 2018 13:07:31 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>JS省市联动</title>
      <link>https://github.com/shiqiRose/shiqiRose.github.io/2018/04/22/js%E7%9C%81%E5%B8%82%E8%81%94%E5%8A%A8/</link>
      <guid>https://github.com/shiqiRose/shiqiRose.github.io/2018/04/22/js%E7%9C%81%E5%B8%82%E8%81%94%E5%8A%A8/</guid>
      <pubDate>Sun, 22 Apr 2018 12:51:34 GMT</pubDate>
      <description>
      
        
        
          &lt;blockquote&gt;
&lt;p&gt;很久之前做的小练习，现在准备复习一下，顺便整理一下，做个记录&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;JS省市联动&quot;&gt;&lt;a href=&quot;#JS省市联动&quot; class=&quot;headerlink&quot; title=&quot;JS省市联动&quot;&gt;&lt;/a&gt;JS省
        
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>很久之前做的小练习，现在准备复习一下，顺便整理一下，做个记录</p></blockquote><h4 id="JS省市联动"><a href="#JS省市联动" class="headerlink" title="JS省市联动"></a>JS省市联动</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;JS 省市联动&lt;/title&gt;</span><br><span class="line"> &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line"> </span><br><span class="line">     function init()&#123;</span><br><span class="line">    </span><br><span class="line">      var  province=[&quot;1101|北京&quot;,&quot;1002|河北省&quot;,&quot;1003|河南省&quot;];</span><br><span class="line">  var  provinceObj=document.getElementById(&quot;province&quot;);</span><br><span class="line">  provinceObj.options[0]=new Option(&quot;--请选择--&quot;);</span><br><span class="line">  </span><br><span class="line">  for(var i=0;i&lt; province.length;i++)&#123;</span><br><span class="line">     var items =  province[i].split(&quot;|&quot;);</span><br><span class="line"> var value=items[0];</span><br><span class="line">         var text=items[1];</span><br><span class="line">         var option=new Option(text,value);</span><br><span class="line">         provinceObj.options[i+1] =option; </span><br><span class="line">   &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">function chooseProvince()&#123;</span><br><span class="line">   var city=document.getElementById(&quot;city&quot;);</span><br><span class="line">       city.options.length=0;</span><br><span class="line">   city.options[0]=new Option(&quot;--请选择--&quot;);</span><br><span class="line">   var citys=[&quot;北京&quot;,&quot;石家庄|唐山|邯郸|天津|秦皇岛|廊坊&quot;,&quot;郑州|开封|洛阳|南阳&quot;];</span><br><span class="line">   var index=document.getElementById(&quot;province&quot;).selectedIndex;</span><br><span class="line">   if(index!=0)&#123;</span><br><span class="line">       var items=citys[index-1].split(&quot;|&quot;);</span><br><span class="line">   for(var i=0;i&lt;items.length;i++)&#123;</span><br><span class="line">      var option=new Option(items[i]);</span><br><span class="line">      city.options[i+1]=option;</span><br><span class="line">   &#125;</span><br><span class="line">      </span><br><span class="line">   &#125;else&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body onload=&quot;init()&quot;&gt;</span><br><span class="line"> </span><br><span class="line">  &lt;select id=&quot;province&quot;  onchange=&quot;chooseProvince()&quot;&gt;</span><br><span class="line">     &lt;option value=&quot;&quot;&gt;--请选择--&lt;/option&gt;</span><br><span class="line">  &lt;/select&gt; </span><br><span class="line">  &lt;select id=&quot;city&quot;&gt;</span><br><span class="line">     &lt;option value=&quot;&quot;&gt;--请选择--&lt;/option&gt;</span><br><span class="line">  &lt;/select&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><img src="http://p77dwd1qb.bkt.clouddn.com/images/js省市联动.png">]]></content:encoded>
      
      <comments>https://github.com/shiqiRose/shiqiRose.github.io/2018/04/22/js%E7%9C%81%E5%B8%82%E8%81%94%E5%8A%A8/#disqus_thread</comments>
    </item>
    
    <item>
      <title>linux查看系统最大的十个文件</title>
      <link>https://github.com/shiqiRose/shiqiRose.github.io/2018/04/21/linux%E6%9F%A5%E7%9C%8B%E7%B3%BB%E7%BB%9F%E6%9C%80%E5%A4%A7%E7%9A%84%E5%8D%81%E4%B8%AA%E6%96%87%E4%BB%B6/</link>
      <guid>https://github.com/shiqiRose/shiqiRose.github.io/2018/04/21/linux%E6%9F%A5%E7%9C%8B%E7%B3%BB%E7%BB%9F%E6%9C%80%E5%A4%A7%E7%9A%84%E5%8D%81%E4%B8%AA%E6%96%87%E4%BB%B6/</guid>
      <pubDate>Sat, 21 Apr 2018 13:58:42 GMT</pubDate>
      <description>
      
        
        
          &lt;h3 id=&quot;linux查看系统最大的十个文件&quot;&gt;&lt;a href=&quot;#linux查看系统最大的十个文件&quot; class=&quot;headerlink&quot; title=&quot;linux查看系统最大的十个文件&quot;&gt;&lt;/a&gt;linux查看系统最大的十个文件&lt;/h3&gt;&lt;h5 id=&quot;第一种方式&quot;&gt;&lt;a
        
      
      </description>
      
      <content:encoded><![CDATA[<h3 id="linux查看系统最大的十个文件"><a href="#linux查看系统最大的十个文件" class="headerlink" title="linux查看系统最大的十个文件"></a>linux查看系统最大的十个文件</h3><h5 id="第一种方式"><a href="#第一种方式" class="headerlink" title="第一种方式"></a>第一种方式</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">find / -type f -print0 | xargs -0 du -h | sort -rh | head -n 10</span><br><span class="line">详细解释</span><br><span class="line">find：在目录结构中搜索文件的命令</span><br><span class="line">/：在整个系统（从根目录开始）中查找</span><br><span class="line">-type：指定文件类型</span><br><span class="line">f：普通文件</span><br><span class="line">-print0：在标准输出显示完整的文件名，其后跟一个空字符（null）</span><br><span class="line">|：控制操作符，将一条命令的输出传递给下一个命令以供进一步处理</span><br><span class="line">xargs：将标准输入转换成命令行参数的命令</span><br><span class="line">-0：以空字符（null）而不是空白字符（LCTT 译者注：即空格、制表符和换行）来分割记录</span><br><span class="line">du -h：以可读格式计算磁盘空间使用情况的命令</span><br><span class="line">sort：对文本文件进行排序的命令</span><br><span class="line">-r：反转结果</span><br><span class="line">-h：用可读格式打印输出</span><br><span class="line">head：输出文件开头部分的命令</span><br><span class="line">n -10：打印前 10 个文件</span><br></pre></td></tr></table></figure><h5 id="第二种方式"><a href="#第二种方式" class="headerlink" title="第二种方式"></a>第二种方式</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> find / -type f -exec du -Sh &#123;&#125; + | sort -rh | head -n 10</span><br><span class="line"> 详细解释</span><br><span class="line"> find：在目录结构中搜索文件的命令</span><br><span class="line">/：在整个系统（从根目录开始）中查找</span><br><span class="line">-type：指定文件类型</span><br><span class="line">f：普通文件</span><br><span class="line">-exec：在所选文件上运行指定命令</span><br><span class="line">du：计算文件占用的磁盘空间的命令</span><br><span class="line">-S：不包含子目录的大小</span><br><span class="line">-h：以可读格式打印</span><br><span class="line">&#123;&#125;：递归地查找目录，统计每个文件占用的磁盘空间</span><br><span class="line">|：控制操作符，将一条命令的输出传递给下一个命令以供进一步处理</span><br><span class="line">sort：对文本文件进行按行排序的命令</span><br><span class="line">-r：反转结果</span><br><span class="line">-h：用可读格式打印输出</span><br><span class="line">head：输出文件开头部分的命令</span><br><span class="line">n -10：打印前 10 个文件</span><br></pre></td></tr></table></figure><h5 id="第三种方式"><a href="#第三种方式" class="headerlink" title="第三种方式"></a>第三种方式</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -type f -print0 | xargs -0 du | sort -n | tail -10 | cut -f2 | xargs -I&#123;&#125; du -sh &#123;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">详细解释</span><br><span class="line">find：在目录结构中搜索文件的命令</span><br><span class="line">/：在整个系统（从根目录开始）中查找</span><br><span class="line">-type：指定文件类型</span><br><span class="line">f：普通文件</span><br><span class="line">-print0：输出完整的文件名，其后跟一个空字符（null）</span><br><span class="line">|：控制操作符，将一条命令的输出传递给下一个命令以供进一步处理</span><br><span class="line">xargs：将标准输入转换成命令行参数的命令</span><br><span class="line">-0：以空字符（null）而不是空白字符来分割记录</span><br><span class="line">du：计算文件占用的磁盘空间的命令</span><br><span class="line">sort：对文本文件进行按行排序的命令</span><br><span class="line">-n：根据数字大小进行比较</span><br><span class="line">tail -10：输出文件结尾部分的命令（最后 10 个文件）</span><br><span class="line">cut：从每行删除特定部分的命令</span><br><span class="line">-f2：只选择特定字段值</span><br><span class="line">-I&#123;&#125;：将初始参数中出现的每个替换字符串都替换为从标准输入读取的名称</span><br><span class="line">-s：仅显示每个参数的总和</span><br><span class="line">-h：用可读格式打印输出</span><br><span class="line">&#123;&#125;：递归地查找目录，统计每个文件占用的磁盘空间</span><br></pre></td></tr></table></figure><h5 id="第四种方式"><a href="#第四种方式" class="headerlink" title="第四种方式"></a>第四种方式</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -type f -ls | sort -k 7 -r -n | head -10 | column -t | awk &apos;&#123;print $7,$11&#125;&apos;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">find：在目录结构中搜索文件的命令</span><br><span class="line">/：在整个系统（从根目录开始）中查找</span><br><span class="line">-type：指定文件类型</span><br><span class="line">f：普通文件</span><br><span class="line">-ls：在标准输出中以 ls -dils 的格式列出当前文件</span><br><span class="line">|：控制操作符，将一条命令的输出传递给下一个命令以供进一步处理</span><br><span class="line">sort：对文本文件进行按行排序的命令</span><br><span class="line">-k：按指定列进行排序</span><br><span class="line">-r：反转结果</span><br><span class="line">-n：根据数字大小进行比较</span><br><span class="line">head：输出文件开头部分的命令</span><br><span class="line">-10：打印前 10 个文件</span><br><span class="line">column：将其输入格式化为多列的命令</span><br><span class="line">-t：确定输入包含的列数并创建一个表</span><br><span class="line">awk：模式扫描和处理语言</span><br><span class="line">&apos;&#123;print $7,$11&#125;&apos;：只打印指定的列</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://github.com/shiqiRose/shiqiRose.github.io/2018/04/21/linux%E6%9F%A5%E7%9C%8B%E7%B3%BB%E7%BB%9F%E6%9C%80%E5%A4%A7%E7%9A%84%E5%8D%81%E4%B8%AA%E6%96%87%E4%BB%B6/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Linux日志筛选命令</title>
      <link>https://github.com/shiqiRose/shiqiRose.github.io/2018/04/17/linux%E6%97%A5%E5%BF%97%E6%9F%A5%E8%AF%A2/</link>
      <guid>https://github.com/shiqiRose/shiqiRose.github.io/2018/04/17/linux%E6%97%A5%E5%BF%97%E6%9F%A5%E8%AF%A2/</guid>
      <pubDate>Tue, 17 Apr 2018 12:54:42 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;懒得介绍了，emmm,如题所述&lt;strong&gt;Linux日志筛选命令&lt;/strong&gt; 。&lt;/p&gt;
&lt;h3 id=&quot;Linux目录操作命令&quot;&gt;&lt;a href=&quot;#Linux目录操作命令&quot; class=&quot;headerlink&quot; title=&quot;Linux目录操作命令&quot;&gt;&lt;/a&gt;
        
      
      </description>
      
      <content:encoded><![CDATA[<p>懒得介绍了，emmm,如题所述<strong>Linux日志筛选命令</strong> 。</p><h3 id="Linux目录操作命令"><a href="#Linux目录操作命令" class="headerlink" title="Linux目录操作命令"></a>Linux目录操作命令</h3><blockquote><p>cd ..退出当前目录，返回上一级目录；cd / 退出当前目录，返回根目录；</p></blockquote><blockquote><p>mkdir命令用于创建一个新的目录；rmdir命令功能删除指定的空目录。</p></blockquote><h3 id="Linux筛选日志"><a href="#Linux筛选日志" class="headerlink" title="Linux筛选日志"></a>Linux筛选日志</h3><h4 id="tail用法"><a href="#tail用法" class="headerlink" title="tail用法"></a>tail用法</h4><blockquote><p>tail  -n  10  test.log   查询日志尾部最后10行的日志;</p></blockquote><blockquote><p>tail -n +10 test.log    查询10行之后的所有日志;</p></blockquote><blockquote><p>tail -n +92表示查询92行之后的日志</p></blockquote><h4 id="head用法"><a href="#head用法" class="headerlink" title="head用法"></a>head用法</h4><blockquote><p>head -n 10  test.log   查询日志文件中的头10行日志;</p></blockquote><blockquote><p>head -n -10  test.log   查询日志文件除了最后10行的其他所有日志;</p></blockquote><blockquote><p>head -n 20 则表示在前面的查询结果里再查前20条记录</p></blockquote><h4 id="cat用法"><a href="#cat用法" class="headerlink" title="cat用法"></a>cat用法</h4><blockquote><p>此时如果我想查看这个关键字前10行和后10行的日志:<br> cat -n test.log |tail -n +92|head -n 20<br> cat -n test.log |grep “地形”  得到关键日志的行号<br> 得到”地形”关键字所在的行号是102行</p></blockquote><h4 id="sed用法"><a href="#sed用法" class="headerlink" title="sed用法"></a>sed用法</h4><blockquote><p>那么按日期怎么查呢?  通常我们非常需要查找指定时间端的日志</p></blockquote><blockquote><p>sed -n ‘/2014-12-17 16:17:20/,/2014-12-17 16:17:36/p’  test.log</p></blockquote><blockquote><p>第二种方式，两个行号之间的命令：</p></blockquote><blockquote><p>sed -n ‘5,10p’ filename 这样你就可以只查看文件的第5行到第10行。</p></blockquote><blockquote><p>特别说明:上面的两个日期必须是日志中打印出来的日志,否则无效.</p></blockquote><blockquote><p>关于日期打印,可以先 grep ‘2014-12-17 16:17:20’ test.log 来确定日志中是否有该时间点,以确保第4步可以拿到日志</p></blockquote><blockquote><p>这个根据时间段查询日志是非常有用的命令<br>如果我们查找的日志很多,打印在屏幕上不方便查看, 有两个方法:</p></blockquote><h4 id="more和less"><a href="#more和less" class="headerlink" title="more和less"></a>more和less</h4><blockquote><p>(1)使用more和less命令, 如: cat -n test.log |grep “地形” |more     这样就分页打印了,通过点击空格键翻页</p></blockquote><blockquote><p>a.More命令</p></blockquote><blockquote><p>more命令，功能类似 cat ，cat命令是整个文件的内容从上到下显示在屏幕上。 more会以一页一页的显示方便使用者逐页阅读，而最基本的指令就是按空白键（space）就往下一页显示，按 b 键就会往回（back）一页显示，而且还有搜寻字串的功能 。more命令从前向后读取文件，因此在启动时就加载整个文件。</p></blockquote><blockquote><p>b.Less</p></blockquote><blockquote><p>less 工具也是对文件或其它输出进行分页显示的工具，应该说是linux正统查看文件内容的工具，功能极其强大。less 的用法比起 more 更加的有弹性。在 more 的时候，我们并没有办法向前面翻， 只能往后面看，但若使用了 less 时，就可以使用 [pageup] [pagedown] 等按键的功能来往前往后翻看文件，更容易用来查看一个文件的内容！除此之外，在 less 里头可以拥有更多的搜索功能，不止可以向下搜，也可以向上搜。</p></blockquote><blockquote><p>(2)使用 &gt;xxx.txt 将其保存到文件中,到时可以拉下这个文件分析.如:</p></blockquote><blockquote><p>cat -n test.log |grep “地形”  &gt;xxx.txt</p></blockquote><blockquote><p>这几个日志查看方法应该可以满足日常需求了.</p></blockquote><h4 id="grep命令多条件查询"><a href="#grep命令多条件查询" class="headerlink" title="grep命令多条件查询"></a>grep命令多条件查询</h4><blockquote><p>1、或操作</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">grep -E ’123|abc’ filename  // 找出文件（filename）中包含123或者包含abc的行</span><br><span class="line">egrep ’123|abc’ filename    // 用egrep同样可以实现</span><br><span class="line">awk ’/123|abc/’ filename   // awk 的实现方式</span><br></pre></td></tr></table></figure><blockquote><p>2、与操作</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">grep pattern1 files | grep pattern2 </span><br><span class="line">//显示既匹配 pattern1 又匹配 pattern2 的行。</span><br></pre></td></tr></table></figure><blockquote><p>3、其他操作</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">grep -i pattern files ：不区分大小写地搜索。默认情况区分大小写，</span><br><span class="line">grep -l pattern files ：只列出匹配的文件名，</span><br><span class="line">grep -L pattern files ：列出不匹配的文件名，</span><br><span class="line">grep -w pattern files ：只匹配整个单词，而不是字符串的一部分（如匹配‘magic’，而不是‘magical’），</span><br><span class="line">grep -C number pattern files ：匹配的上下文分别显示[number]行</span><br><span class="line"></span><br><span class="line">grep的-A, -B, -C选项分别可以显示匹配行的后,前,后前多少行内容: </span><br><span class="line"></span><br><span class="line">grep -A 100 <span class="string">'TooManyResultsException'</span> catalina.log.2017-09-25  后</span><br><span class="line"></span><br><span class="line">grep -B 100 <span class="string">'TooManyResultsException'</span> catalina.log.2017-09-25  前</span><br><span class="line"></span><br><span class="line">grep -C 100 <span class="string">'TooManyResultsException'</span> catalina.log.2017-09-25  前后</span><br><span class="line"></span><br><span class="line">grep -C 100 --color <span class="string">'TooManyResultsException'</span> catalina.log.2017-09-25  带颜色输出</span><br></pre></td></tr></table></figure><blockquote><p>查询日志特殊场景：</p></blockquote><blockquote><p>如果日志非常的多，在短短的一个小时的时间中就有上千条或者上万条数据，仅仅根据条件筛选的话非常麻烦，即使筛选出来也会有很多条数据。如果我们知道该条调用发生的时间，就可以根据日志最前面打印的时间判断出哪些记录符合查询条件。所以，我们可以根据日志的日期作为搜索条件，并且配合grep使用，如下所示：</p></blockquote><pre><code class="bash">sed -n <span class="string">'/2017-03-08 15:42:03/,/2017-03-08 15:42:05/p'</span> dubbo-access-consumer.2017-03-08.log | grep countOrgOrder</code></pre><blockquote><p>我们可以使用sed命令的查询模式：</p></blockquote><pre><code class="bash">使用模式进行查询     [root@localhost ruby] <span class="comment"># sed -n '/ruby/p' ab  #查询包括关键字ruby所在所有行</span>     [root@localhost ruby] <span class="comment"># sed -n '/\$/p' ab    #查询包括关键字$所在所有行，使用反斜线\屏蔽特殊含义</span>查询.bz2类型的日志文件，如下所示：bzgrep 60000000005137 dubbo-access-provider.2017-05-17.log.bz2</code></pre><blockquote><p>下面介绍一下如何查询筛选服务器上运行的进程：</p></blockquote><pre><code class="bash">1.使用ps命令执行相应操作，如果想查询服务器上所有运行的进程的话，可以使用命令ps aux即可查出；2.如果有具体的筛选条件的话，就可以使用ps aux | grep xxx即可；3.或者使用命令 ps -ef | grep xxx 也可以完成相应的筛选工作；4.终止某个进程的命令 <span class="built_in">kill</span> -9 XXXXX     XXXXX为上述查出的序号  如： 19979线程终止为： <span class="built_in">kill</span> -9 19979</code></pre><blockquote><p>以上内容摘抄整理自互联网，如有侵权，请联系本人~</p></blockquote>]]></content:encoded>
      
      <comments>https://github.com/shiqiRose/shiqiRose.github.io/2018/04/17/linux%E6%97%A5%E5%BF%97%E6%9F%A5%E8%AF%A2/#disqus_thread</comments>
    </item>
    
    <item>
      <title>nginx添加ssl</title>
      <link>https://github.com/shiqiRose/shiqiRose.github.io/2018/04/16/nginx%E6%B7%BB%E5%8A%A0ssl/</link>
      <guid>https://github.com/shiqiRose/shiqiRose.github.io/2018/04/16/nginx%E6%B7%BB%E5%8A%A0ssl/</guid>
      <pubDate>Mon, 16 Apr 2018 13:46:02 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;strong&gt;nginx&lt;/strong&gt; 每次安装一个新的模块都需要重新编译一次，编译完成之后将nginx这一个文件拷贝到sbin下面即可，踩了好几次，来分享一下。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td c
        
      
      </description>
      
      <content:encoded><![CDATA[<p><strong>nginx</strong> 每次安装一个新的模块都需要重新编译一次，编译完成之后将nginx这一个文件拷贝到sbin下面即可，踩了好几次，来分享一下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/nginx/sbin/nginx -V  #查看nginx安装模块</span><br><span class="line">cd  /usr/local/nginx-1.12.2</span><br><span class="line">./configure --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module </span><br><span class="line">make</span><br><span class="line">mv /usr/local/nginx/sbin/nginx /usr/local/nginx/sbin/nginx.old</span><br><span class="line">cp objs/nginx /usr/local/nginx/sbin/nginx</span><br><span class="line">make upgrade       //替换老的nginx进程</span><br><span class="line">再次执行：</span><br><span class="line">/usr/local/nginx/sbin/nginx -V 将会显示新的nginx的版本及编译的参数。</span><br></pre></td></tr></table></figure><h3 id="nginx设置开机自启动"><a href="#nginx设置开机自启动" class="headerlink" title="nginx设置开机自启动"></a>nginx设置开机自启动</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">如果你采用编译安装的方式，直接在/etc/rc.local 增加如下代码即可：</span><br><span class="line">/usr/local/nginx/sbin/nginx </span><br><span class="line">前提是你的nginx是安装到/usr/local/nginx 下</span><br><span class="line"></span><br><span class="line">另外，如果使用yum 安装的话，默认是作为服务器，开机自动启动的。可以用chkconfig 查看</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://github.com/shiqiRose/shiqiRose.github.io/2018/04/16/nginx%E6%B7%BB%E5%8A%A0ssl/#disqus_thread</comments>
    </item>
    
    <item>
      <title>win快捷键进cmd</title>
      <link>https://github.com/shiqiRose/shiqiRose.github.io/2018/04/10/win%E5%BF%AB%E6%8D%B7%E9%94%AE%E8%BF%9Bcmd/</link>
      <guid>https://github.com/shiqiRose/shiqiRose.github.io/2018/04/10/win%E5%BF%AB%E6%8D%B7%E9%94%AE%E8%BF%9Bcmd/</guid>
      <pubDate>Tue, 10 Apr 2018 14:47:48 GMT</pubDate>
      <description>
      
        
        
          &lt;blockquote&gt;
&lt;p&gt;前言&lt;br&gt;是不是用惯了命令行觉得来回找太麻烦！？&lt;br&gt;来来来get新技能（吐槽一下这个命令太长我记不住的）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;第一步&lt;/strong&gt; ：开始→所有程序→附件→命令提示符→右键
        
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>前言<br>是不是用惯了命令行觉得来回找太麻烦！？<br>来来来get新技能（吐槽一下这个命令太长我记不住的）</p></blockquote><ul><li><strong>第一步</strong> ：开始→所有程序→附件→命令提示符→右键选择以管理员运行(或者执行身份)→OK</li><li><strong>第二步</strong> ：在win+R(也就是运行)中输入： runas /user:administrator Cmd 然后回车，会提示你输入密码，输入后即可以管理员身份启动CMD</li><li><strong>PS</strong> ：也可以直接打开CMD输入  runas /user:administrator Cmd  然后回车<br>此法有2个前提：<br>1.administrator需要设置密码<br>2.secondLogon…服务需开启</li></ul>]]></content:encoded>
      
      <comments>https://github.com/shiqiRose/shiqiRose.github.io/2018/04/10/win%E5%BF%AB%E6%8D%B7%E9%94%AE%E8%BF%9Bcmd/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
