<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[JS省市联动]]></title>
    <url>%2FshiqiRose.github.io%2F2018%2F04%2F22%2Fjs%E7%9C%81%E5%B8%82%E8%81%94%E5%8A%A8%2F</url>
    <content type="text"><![CDATA[很久之前做的小练习，现在准备复习一下，顺便整理一下，做个记录 JS省市联动12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;title&gt;JS 省市联动&lt;/title&gt; &lt;script type=&quot;text/javascript&quot;&gt; function init()&#123; var province=[&quot;1101|北京&quot;,&quot;1002|河北省&quot;,&quot;1003|河南省&quot;]; var provinceObj=document.getElementById(&quot;province&quot;); provinceObj.options[0]=new Option(&quot;--请选择--&quot;); for(var i=0;i&lt; province.length;i++)&#123; var items = province[i].split(&quot;|&quot;); var value=items[0]; var text=items[1]; var option=new Option(text,value); provinceObj.options[i+1] =option; &#125; &#125; function chooseProvince()&#123; var city=document.getElementById(&quot;city&quot;); city.options.length=0; city.options[0]=new Option(&quot;--请选择--&quot;); var citys=[&quot;北京&quot;,&quot;石家庄|唐山|邯郸|天津|秦皇岛|廊坊&quot;,&quot;郑州|开封|洛阳|南阳&quot;]; var index=document.getElementById(&quot;province&quot;).selectedIndex; if(index!=0)&#123; var items=citys[index-1].split(&quot;|&quot;); for(var i=0;i&lt;items.length;i++)&#123; var option=new Option(items[i]); city.options[i+1]=option; &#125; &#125;else&#123;&#125; &#125; &lt;/script&gt;&lt;/head&gt;&lt;body onload=&quot;init()&quot;&gt; &lt;select id=&quot;province&quot; onchange=&quot;chooseProvince()&quot;&gt; &lt;option value=&quot;&quot;&gt;--请选择--&lt;/option&gt; &lt;/select&gt; &lt;select id=&quot;city&quot;&gt; &lt;option value=&quot;&quot;&gt;--请选择--&lt;/option&gt; &lt;/select&gt;&lt;/body&gt;&lt;/html&gt;]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[linux查看系统最大的十个文件]]></title>
    <url>%2FshiqiRose.github.io%2F2018%2F04%2F21%2Flinux%E6%9F%A5%E7%9C%8B%E7%B3%BB%E7%BB%9F%E6%9C%80%E5%A4%A7%E7%9A%84%E5%8D%81%E4%B8%AA%E6%96%87%E4%BB%B6%2F</url>
    <content type="text"><![CDATA[linux查看系统最大的十个文件第一种方式12345678910111213141516find / -type f -print0 | xargs -0 du -h | sort -rh | head -n 10详细解释find：在目录结构中搜索文件的命令/：在整个系统（从根目录开始）中查找-type：指定文件类型f：普通文件-print0：在标准输出显示完整的文件名，其后跟一个空字符（null）|：控制操作符，将一条命令的输出传递给下一个命令以供进一步处理xargs：将标准输入转换成命令行参数的命令-0：以空字符（null）而不是空白字符（LCTT 译者注：即空格、制表符和换行）来分割记录du -h：以可读格式计算磁盘空间使用情况的命令sort：对文本文件进行排序的命令-r：反转结果-h：用可读格式打印输出head：输出文件开头部分的命令n -10：打印前 10 个文件 第二种方式1234567891011121314151617 find / -type f -exec du -Sh &#123;&#125; + | sort -rh | head -n 10 详细解释 find：在目录结构中搜索文件的命令/：在整个系统（从根目录开始）中查找-type：指定文件类型f：普通文件-exec：在所选文件上运行指定命令du：计算文件占用的磁盘空间的命令-S：不包含子目录的大小-h：以可读格式打印&#123;&#125;：递归地查找目录，统计每个文件占用的磁盘空间|：控制操作符，将一条命令的输出传递给下一个命令以供进一步处理sort：对文本文件进行按行排序的命令-r：反转结果-h：用可读格式打印输出head：输出文件开头部分的命令n -10：打印前 10 个文件 第三种方式1find / -type f -print0 | xargs -0 du | sort -n | tail -10 | cut -f2 | xargs -I&#123;&#125; du -sh &#123;&#125; 12345678910111213141516171819详细解释find：在目录结构中搜索文件的命令/：在整个系统（从根目录开始）中查找-type：指定文件类型f：普通文件-print0：输出完整的文件名，其后跟一个空字符（null）|：控制操作符，将一条命令的输出传递给下一个命令以供进一步处理xargs：将标准输入转换成命令行参数的命令-0：以空字符（null）而不是空白字符来分割记录du：计算文件占用的磁盘空间的命令sort：对文本文件进行按行排序的命令-n：根据数字大小进行比较tail -10：输出文件结尾部分的命令（最后 10 个文件）cut：从每行删除特定部分的命令-f2：只选择特定字段值-I&#123;&#125;：将初始参数中出现的每个替换字符串都替换为从标准输入读取的名称-s：仅显示每个参数的总和-h：用可读格式打印输出&#123;&#125;：递归地查找目录，统计每个文件占用的磁盘空间 第四种方式1find / -type f -ls | sort -k 7 -r -n | head -10 | column -t | awk &apos;&#123;print $7,$11&#125;&apos; 12345678910111213141516find：在目录结构中搜索文件的命令/：在整个系统（从根目录开始）中查找-type：指定文件类型f：普通文件-ls：在标准输出中以 ls -dils 的格式列出当前文件|：控制操作符，将一条命令的输出传递给下一个命令以供进一步处理sort：对文本文件进行按行排序的命令-k：按指定列进行排序-r：反转结果-n：根据数字大小进行比较head：输出文件开头部分的命令-10：打印前 10 个文件column：将其输入格式化为多列的命令-t：确定输入包含的列数并创建一个表awk：模式扫描和处理语言&apos;&#123;print $7,$11&#125;&apos;：只打印指定的列]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux日志筛选命令]]></title>
    <url>%2FshiqiRose.github.io%2F2018%2F04%2F17%2Flinux%E6%97%A5%E5%BF%97%E6%9F%A5%E8%AF%A2%2F</url>
    <content type="text"><![CDATA[懒得介绍了，emmm,如题所述Linux日志筛选命令 。 Linux目录操作命令 cd ..退出当前目录，返回上一级目录；cd / 退出当前目录，返回根目录； mkdir命令用于创建一个新的目录；rmdir命令功能删除指定的空目录。 Linux筛选日志tail用法 tail -n 10 test.log 查询日志尾部最后10行的日志; tail -n +10 test.log 查询10行之后的所有日志; tail -n +92表示查询92行之后的日志 head用法 head -n 10 test.log 查询日志文件中的头10行日志; head -n -10 test.log 查询日志文件除了最后10行的其他所有日志; head -n 20 则表示在前面的查询结果里再查前20条记录 cat用法 此时如果我想查看这个关键字前10行和后10行的日志: cat -n test.log |tail -n +92|head -n 20 cat -n test.log |grep “地形” 得到关键日志的行号 得到”地形”关键字所在的行号是102行 sed用法 那么按日期怎么查呢? 通常我们非常需要查找指定时间端的日志 sed -n ‘/2014-12-17 16:17:20/,/2014-12-17 16:17:36/p’ test.log 第二种方式，两个行号之间的命令： sed -n ‘5,10p’ filename 这样你就可以只查看文件的第5行到第10行。 特别说明:上面的两个日期必须是日志中打印出来的日志,否则无效. 关于日期打印,可以先 grep ‘2014-12-17 16:17:20’ test.log 来确定日志中是否有该时间点,以确保第4步可以拿到日志 这个根据时间段查询日志是非常有用的命令如果我们查找的日志很多,打印在屏幕上不方便查看, 有两个方法: more和less (1)使用more和less命令, 如: cat -n test.log |grep “地形” |more 这样就分页打印了,通过点击空格键翻页 a.More命令 more命令，功能类似 cat ，cat命令是整个文件的内容从上到下显示在屏幕上。 more会以一页一页的显示方便使用者逐页阅读，而最基本的指令就是按空白键（space）就往下一页显示，按 b 键就会往回（back）一页显示，而且还有搜寻字串的功能 。more命令从前向后读取文件，因此在启动时就加载整个文件。 b.Less less 工具也是对文件或其它输出进行分页显示的工具，应该说是linux正统查看文件内容的工具，功能极其强大。less 的用法比起 more 更加的有弹性。在 more 的时候，我们并没有办法向前面翻， 只能往后面看，但若使用了 less 时，就可以使用 [pageup] [pagedown] 等按键的功能来往前往后翻看文件，更容易用来查看一个文件的内容！除此之外，在 less 里头可以拥有更多的搜索功能，不止可以向下搜，也可以向上搜。 (2)使用 &gt;xxx.txt 将其保存到文件中,到时可以拉下这个文件分析.如: cat -n test.log |grep “地形” &gt;xxx.txt 这几个日志查看方法应该可以满足日常需求了. grep命令多条件查询 1、或操作 123grep -E ’123|abc’ filename // 找出文件（filename）中包含123或者包含abc的行egrep ’123|abc’ filename // 用egrep同样可以实现awk ’/123|abc/’ filename // awk 的实现方式 2、与操作 12grep pattern1 files | grep pattern2 //显示既匹配 pattern1 又匹配 pattern2 的行。 3、其他操作 123456789101112131415grep -i pattern files ：不区分大小写地搜索。默认情况区分大小写，grep -l pattern files ：只列出匹配的文件名，grep -L pattern files ：列出不匹配的文件名，grep -w pattern files ：只匹配整个单词，而不是字符串的一部分（如匹配‘magic’，而不是‘magical’），grep -C number pattern files ：匹配的上下文分别显示[number]行grep的-A, -B, -C选项分别可以显示匹配行的后,前,后前多少行内容: grep -A 100 'TooManyResultsException' catalina.log.2017-09-25 后grep -B 100 'TooManyResultsException' catalina.log.2017-09-25 前grep -C 100 'TooManyResultsException' catalina.log.2017-09-25 前后grep -C 100 --color 'TooManyResultsException' catalina.log.2017-09-25 带颜色输出 查询日志特殊场景： 如果日志非常的多，在短短的一个小时的时间中就有上千条或者上万条数据，仅仅根据条件筛选的话非常麻烦，即使筛选出来也会有很多条数据。如果我们知道该条调用发生的时间，就可以根据日志最前面打印的时间判断出哪些记录符合查询条件。所以，我们可以根据日志的日期作为搜索条件，并且配合grep使用，如下所示： sed -n '/2017-03-08 15:42:03/,/2017-03-08 15:42:05/p' dubbo-access-consumer.2017-03-08.log | grep countOrgOrder 我们可以使用sed命令的查询模式： 使用模式进行查询 [root@localhost ruby] # sed -n '/ruby/p' ab #查询包括关键字ruby所在所有行 [root@localhost ruby] # sed -n '/\$/p' ab #查询包括关键字$所在所有行，使用反斜线\屏蔽特殊含义 查询.bz2类型的日志文件，如下所示：bzgrep 60000000005137 dubbo-access-provider.2017-05-17.log.bz2 下面介绍一下如何查询筛选服务器上运行的进程： 1.使用ps命令执行相应操作，如果想查询服务器上所有运行的进程的话，可以使用命令ps aux即可查出； 2.如果有具体的筛选条件的话，就可以使用ps aux | grep xxx即可； 3.或者使用命令 ps -ef | grep xxx 也可以完成相应的筛选工作； 4.终止某个进程的命令 kill -9 XXXXX XXXXX为上述查出的序号 如： 19979线程终止为： kill -9 19979 以上内容摘抄整理自互联网，如有侵权，请联系本人~]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[nginx添加ssl]]></title>
    <url>%2FshiqiRose.github.io%2F2018%2F04%2F16%2Fnginx%E6%B7%BB%E5%8A%A0ssl%2F</url>
    <content type="text"><![CDATA[nginx 每次安装一个新的模块都需要重新编译一次，编译完成之后将nginx这一个文件拷贝到sbin下面即可，踩了好几次，来分享一下。 123456789/usr/local/nginx/sbin/nginx -V #查看nginx安装模块cd /usr/local/nginx-1.12.2./configure --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module makemv /usr/local/nginx/sbin/nginx /usr/local/nginx/sbin/nginx.oldcp objs/nginx /usr/local/nginx/sbin/nginxmake upgrade //替换老的nginx进程再次执行：/usr/local/nginx/sbin/nginx -V 将会显示新的nginx的版本及编译的参数。 nginx设置开机自启动12345如果你采用编译安装的方式，直接在/etc/rc.local 增加如下代码即可：/usr/local/nginx/sbin/nginx 前提是你的nginx是安装到/usr/local/nginx 下另外，如果使用yum 安装的话，默认是作为服务器，开机自动启动的。可以用chkconfig 查看]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
        <tag>SSL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[win快捷键进cmd]]></title>
    <url>%2FshiqiRose.github.io%2F2018%2F04%2F10%2Fwin%E5%BF%AB%E6%8D%B7%E9%94%AE%E8%BF%9Bcmd%2F</url>
    <content type="text"><![CDATA[前言是不是用惯了命令行觉得来回找太麻烦！？来来来get新技能（吐槽一下这个命令太长我记不住的） 第一步 ：开始→所有程序→附件→命令提示符→右键选择以管理员运行(或者执行身份)→OK 第二步 ：在win+R(也就是运行)中输入： runas /user:administrator Cmd 然后回车，会提示你输入密码，输入后即可以管理员身份启动CMD PS ：也可以直接打开CMD输入 runas /user:administrator Cmd 然后回车此法有2个前提：1.administrator需要设置密码2.secondLogon…服务需开启]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>Cmd</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo d无反应]]></title>
    <url>%2FshiqiRose.github.io%2F2018%2F04%2F08%2Fhexo%20d%E6%97%A0%E5%8F%8D%E5%BA%94%2F</url>
    <content type="text"><![CDATA[hexo d 无反应 在环境部署到最后一步遇到了这个问题来分享下： title: xxxx //网站标题 author: xxx //作者名字 language: zh-Hans //网站使用的语言 中文 主要是站点配置文件_config.yml如下代码原因：冒号后面有个空格~1234deploy: type: git repo: https://github.com/username/username.github.io.git branch: master]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2FshiqiRose.github.io%2F2018%2F04%2F07%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>helloWorld</tag>
      </tags>
  </entry>
</search>
